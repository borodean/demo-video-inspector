{"version":3,"sources":["store/metrics/actions.js","components/MonkeyPatchedC3Chart/index.js","config/constants.js","utils/data.js","components/Chart/constants.js","components/Chart/index.js","hooks/useWorkerInterval.js","components/Player/index.js","components/App/index.js","store/metrics/reducers.js","store/index.js","serviceWorker.js","index.js"],"names":["startRegion","date","type","endRegion","MonkeyPatchedC3Chart","config","regions","this","chart","data","C3Chart","PLAYER_DIMENSIONS","height","width","formatBits","bits","Math","round","DEFAULT_C3_OPTIONS","axis","x","tick","format","toLocaleString","undefined","hour","minute","second","y","label","y2","show","size","tooltip","value","ratio","id","DEFAULT_C3_DATA_OPTIONS","axes","B","keys","names","Q","W","Chart","points","useMemo","json","length","className","stroke","strokeWidth","x2","y1","useWorkerInterval","callback","delay","callbackRef","useRef","useEffect","current","setInterval","clearInterval","Player","onBuffering","onPoint","controllerRef","player","handleBuffering","event","Date","isBuffering","buffering","addEventListener","removeEventListener","ranges","bufferedInfo","getBufferedInfo","stats","getStats","total","reduce","sum","start","end","streamBandwidth","estimatedBandwidth","style","autoPlay","src","ref","App","dispatch","useDispatch","useSelector","store","metrics","useCallback","handlePoint","payload","addPoint","initialState","rootReducer","combineReducers","state","action","slice","lastRegion","otherRegions","configureStore","createStore","devToolsEnhancer","Boolean","window","location","hostname","match","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84f161b3.chunk.js","sourcesContent":["export const ADD_POINT = 'ADD_POINT';\nexport const START_REGION = 'START_REGION';\nexport const END_REGION = 'END_REGION';\n\nexport const addPoint = payload => ({\n  type: ADD_POINT,\n  payload\n});\n\nexport const startRegion = date => ({\n  type: START_REGION,\n  date\n});\n\n\nexport const endRegion = date => ({\n  type: END_REGION,\n  date\n});\n","import C3Chart from 'react-c3js';\n\n// Fixes the issue:\n// https://github.com/bcbcarl/react-c3js/issues/18\n\nclass MonkeyPatchedC3Chart extends C3Chart {\n  updateChart(config) {\n    super.updateChart(config);\n\n    if (config.regions) {\n      this.chart.regions(config.regions);\n    } else if (this.chart.regions && !config.regions) {\n      this.chart.regions([]);\n    }\n\n    super.loadNewData(config.data);\n  }\n}\n\nexport default MonkeyPatchedC3Chart;\n","export const MAX_ENTRIES = 10;\n\nexport const PLAYER_DIMENSIONS = {height: 320, width: 400};\n\nexport const PLAYER_URL =\n  'https://storage.googleapis.com/shaka-demo-assets/angel-one/dash.mpd';\n\nexport const POLLING_INTERVAL = 1000;\n","export const formatBits = bits => Math.round(bits / 1024);\n\nexport const formatTime = date =>\n  date.toLocaleString(undefined, {\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n  });\n\nexport const sumRanges = ranges =>\n  ranges.reduce((sum, {start, end}) => sum - start + end, 0);\n","import {PLAYER_DIMENSIONS} from '../../config/constants';\nimport {formatBits, formatTime} from '../../utils/data';\n\nexport const DEFAULT_C3_OPTIONS = {\n  axis: {\n    x: {\n      tick: {\n        format: formatTime\n      },\n      type: 'timeseries'\n    },\n    y: {\n      label: 'Кбит/с',\n      tick: {\n        format: formatBits\n      }\n    },\n    y2: {\n      label: 'с',\n      show: true\n    }\n  },\n  size: {\n    height: PLAYER_DIMENSIONS.height,\n    width: PLAYER_DIMENSIONS.width * 2\n  },\n  tooltip: {\n    format: {\n      value: (value, ratio, id) => {\n        if (id === 'Q' || id === 'W') {\n          return formatBits(value) + ' Кбит/с';\n        }\n        if (id === 'B') {\n          return value + ' с';\n        }\n      }\n    }\n  }\n};\n\nexport const DEFAULT_C3_DATA_OPTIONS = {\n  axes: {\n    B: 'y2'\n  },\n  keys: {\n    x: 'date',\n    value: ['B', 'Q', 'W']\n  },\n  names: {\n    B: 'Размер буфера',\n    Q: 'Качество',\n    W: 'Ширина канала'\n  }\n};\n","import PropTypes from 'prop-types';\nimport React, {useMemo} from 'react';\n\nimport MonkeyPatchedC3Chart from '../MonkeyPatchedC3Chart';\nimport {DEFAULT_C3_DATA_OPTIONS, DEFAULT_C3_OPTIONS} from './constants';\n\nfunction Chart({points, regions}) {\n  const data = useMemo(\n    () => ({\n      ...DEFAULT_C3_DATA_OPTIONS,\n      json: points\n    }),\n    [points]\n  );\n\n  if (points.length < 2) {\n    return null;\n  }\n\n  return (\n    <div className=\"chart\">\n      <MonkeyPatchedC3Chart\n        {...DEFAULT_C3_OPTIONS}\n        data={data}\n        regions={regions}\n      />\n      <svg className=\"buffering-legend\" width=\"94\" height=\"14\">\n        <g className=\"c3-legend-item\">\n          <text x=\"16.0\" y=\"9\">\n            Буферизация\n          </text>\n          <line\n            className=\"c3-legend-item-tile\"\n            stroke=\"#ecf2f7\"\n            strokeWidth=\"10\"\n            x2=\"10\"\n            y1=\"4\"\n            y2=\"4\"\n          ></line>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nChart.propTypes = {\n  points: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.instanceOf(Date).isRequired,\n      B: PropTypes.number.isRequired,\n      Q: PropTypes.number.isRequired,\n      W: PropTypes.number.isRequired\n    })\n  ).isRequired,\n  regions: PropTypes.arrayOf(\n    PropTypes.shape({\n      start: PropTypes.instanceOf(Date).isRequired,\n      end: PropTypes.instanceOf(Date)\n    })\n  ).isRequired\n};\n\nexport default Chart;\n","import {clearInterval, setInterval} from 'worker-timers';\nimport {useEffect, useRef} from 'react';\n\nfunction useWorkerInterval(callback, delay) {\n  const callbackRef = useRef();\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const id = setInterval(() => callbackRef.current(), delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useWorkerInterval;\n","import PropTypes from 'prop-types';\nimport React, {useEffect, useRef} from 'react';\nimport ShakaPlayer from 'shaka-player-react';\n\nimport {\n  PLAYER_DIMENSIONS,\n  PLAYER_URL,\n  POLLING_INTERVAL\n} from '../../config/constants';\nimport useWorkerInterval from '../../hooks/useWorkerInterval';\nimport {sumRanges} from '../../utils/data';\n\nfunction Player({onBuffering, onPoint}) {\n  const controllerRef = useRef();\n\n  useEffect(() => {\n    const {player} = controllerRef.current;\n\n    const handleBuffering = event => {\n      onBuffering({date: new Date(), isBuffering: event.buffering});\n    };\n\n    player.addEventListener('buffering', handleBuffering);\n\n    return () => {\n      player.removeEventListener('buffering', handleBuffering);\n    };\n  }, [onBuffering]);\n\n  useWorkerInterval(() => {\n    const {player} = controllerRef.current;\n\n    const bufferedInfo = player.getBufferedInfo();\n    const stats = player.getStats();\n\n    onPoint({\n      date: new Date(),\n      B: sumRanges(bufferedInfo.total),\n      Q: stats.streamBandwidth,\n      W: Math.round(stats.estimatedBandwidth)\n    });\n  }, POLLING_INTERVAL);\n\n  return (\n    <div className=\"player\" style={PLAYER_DIMENSIONS}>\n      <ShakaPlayer\n        autoPlay\n        src={PLAYER_URL}\n        ref={controllerRef}\n        {...PLAYER_DIMENSIONS}\n      />\n    </div>\n  );\n}\n\nPlayer.propTypes = {\n  onBuffering: PropTypes.func.isRequired,\n  onPoint: PropTypes.func.isRequired\n};\n\nexport default Player;\n","import React, {useCallback} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n  addPoint,\n  endRegion,\n  startRegion\n} from '../../store/metrics/actions';\nimport Chart from '../Chart';\nimport Player from '../Player';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const {points, regions} = useSelector(store => store.metrics);\n\n  const handleBuffering = useCallback(\n    ({date, isBuffering}) => {\n      const action = isBuffering ? startRegion : endRegion;\n      dispatch(action(date));\n    },\n    [dispatch]\n  );\n\n  const handlePoint = useCallback(\n    payload => dispatch(addPoint(payload)),\n    [dispatch]\n  );\n\n  return (\n    <div className=\"app\">\n      <Player onBuffering={handleBuffering} onPoint={handlePoint} />\n      <Chart points={points} regions={regions} />\n    </div>\n  );\n}\n\nexport default App;\n","import {MAX_ENTRIES} from '../../config/constants';\nimport {ADD_POINT, START_REGION, END_REGION} from './actions';\n\nexport const initialState = {\n  regions: [],\n  points: []\n};\n\nexport const metricsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POINT:\n      return {\n        ...state,\n        points: [...state.points, action.payload].slice(-MAX_ENTRIES)\n      };\n    case START_REGION:\n      return {\n        ...state,\n        regions: [...state.regions, {start: action.date}].slice(-MAX_ENTRIES)\n      };\n    case END_REGION: {\n      const lastRegion = state.regions[state.regions.length - 1];\n      const otherRegions = state.regions.slice(0, -1);\n      return {\n        ...state,\n        regions: [...otherRegions, {...lastRegion, end: action.date}]\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nimport { metricsReducer } from './metrics/reducers';\n\nconst rootReducer = combineReducers({\n  metrics: metricsReducer\n});\n\nconst configureStore = () =>\n  createStore(rootReducer, devToolsEnhancer({}));\n\nexport default configureStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider as ReduxProvider} from 'react-redux';\n\nimport App from './components/App';\nimport configureStore from './store';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nconst Root = () => (\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}